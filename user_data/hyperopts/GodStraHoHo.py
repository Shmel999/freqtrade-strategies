# GodStraHoHo Strategy Hyperopt (LEVEL 2)
# This script just ReHyperopt Integer and Real
# numbers that generated by GodStraHo.
# When you generate new Strategy with
# GodStraHo You need to rehyperopt it
# With this hyperopt file to make it
# More effective.
# Increase the search space to search
# more aria first you need to copy the
# buy_params and sell_params bellow from
# the generated strategy file(GodStra.py)
# Author: @Mablue (Masoud Azizi)
# github: https://github.com/mablue/
# freqtrade hyperopt --hyperopt GodStraHoHo --hyperopt-loss SharpeHyperOptLossDaily --spaces buy sell --strategy GodStra --config config.json -e 100

# --- Do not remove these libs ---
from functools import reduce
from typing import Any, Callable, Dict, List

import numpy as np  # noqa
import pandas as pd  # noqa
from pandas import DataFrame
from skopt.space import Categorical, Dimension, Integer, Real  # noqa

from freqtrade.optimize.hyperopt_interface import IHyperOpt

# --------------------------------
# Add your lib to import here
# import talib.abstract as ta  # noqa
import freqtrade.vendor.qtpylib.indicators as qtpylib
# this is your trading strategy DNA Size
# you can change it and see the results...
# A real number(0.01~0.99)
searchRange = 0.5
# past all generated buy and sell params (from GodStraHo) here:

# **************************************** Copy Generated Strategy params here *************************************************
# Buy hyperspace params:
buy_params = {

}

# Sell hyperspace params:
sell_params = {

}
# ******************************************************* End ******************************************************************


fil = filter(lambda k: 'indicator' in k, buy_params.keys())
lst = list(fil)
DNA_SIZE = len(lst)

fil = filter(lambda k: 'indicator' in k, sell_params.keys())
lst = list(fil)
SELL_DNA_SIZE = len(lst)


class GodStraHoHo(IHyperOpt):

    @staticmethod
    def indicator_space() -> List[Dimension]:
        """
        Define your Hyperopt space for searching buy strategy parameters.
        """
        gene = list()

        for i in range(DNA_SIZE):
            OPR = buy_params[f'buy-oper-{i}']
            INT = buy_params[f'buy-int-{i}']
            REAL = buy_params[f'buy-real-{i}']

            if OPR in [">I", "=I", "<I"]:
                min = int(INT*(1-searchRange))
                max = int(INT*(1+searchRange))
                try:
                    gene.append(Integer(min, max, name=f'buy-int-{i}'))
                except:
                    gene.append(Integer(max, min, name=f'buy-int-{i}'))

            elif OPR in [">R", "=R", "<R"]:

                min = REAL*(1-searchRange)
                max = REAL*(1+searchRange)
                try:
                    gene.append(Real(min, max, name=f'buy-real-{i}'))
                except:
                    gene.append(Real(max, min, name=f'buy-real-{i}'))

        return gene

    @ staticmethod
    def buy_strategy_generator(params: Dict[str, Any]) -> Callable:
        """
        Define the buy strategy parameters to be used by Hyperopt.
        """
        def populate_buy_trend(dataframe: DataFrame, metadata: dict) -> DataFrame:
            """
            Buy strategy Hyperopt will build and use.
            """
            conditions = []
            # GUARDS AND TRENDS
            for i in range(DNA_SIZE):

                OPR = buy_params[f'buy-oper-{i}']
                IND = buy_params[f'buy-indicator-{i}']
                INT = buy_params[f'buy-int-{i}']
                REAL = buy_params[f'buy-real-{i}']
                DFIND = dataframe[IND]
                if OPR == ">I":
                    conditions.append(DFIND > INT)
                elif OPR == "=I":
                    conditions.append(DFIND == INT)
                elif OPR == "<I":
                    conditions.append(DFIND < INT)
                elif OPR == ">R":
                    conditions.append(DFIND > REAL)
                elif OPR == "=R":
                    conditions.append(np.isclose(DFIND, REAL))
                elif OPR == "<R":
                    conditions.append(DFIND < REAL)

            if conditions:
                dataframe.loc[
                    reduce(lambda x, y: x & y, conditions),
                    'buy'] = 1

            return dataframe

        return populate_buy_trend

    @ staticmethod
    def sell_indicator_space() -> List[Dimension]:
        """
        Define your Hyperopt space for searching sell strategy parameters.
        """
        gene = list()

        for i in range(SELL_DNA_SIZE):
            OPR = sell_params[f'sell-oper-{i}']
            INT = sell_params[f'sell-int-{i}']
            REAL = sell_params[f'sell-real-{i}']

            if OPR in [">I", "=I", "<I"]:
                min = int(INT*(1-searchRange))
                max = int(INT*(1+searchRange))
                try:
                    gene.append(Integer(min, max, name=f'sell-int-{i}'))
                except:
                    gene.append(Integer(max, min, name=f'sell-int-{i}'))
            elif OPR in [">R", "=R", "<R"]:
                min = REAL*(1-searchRange)
                max = REAL*(1+searchRange)
                try:
                    gene.append(Real(min, max, name=f'sell-real-{i}'))
                except:
                    gene.append(Real(max, min, name=f'sell-real-{i}'))

        return gene

    @ staticmethod
    def sell_strategy_generator(params: Dict[str, Any]) -> Callable:
        """
        Define the sell strategy parameters to be used by Hyperopt.
        """
        def populate_sell_trend(dataframe: DataFrame, metadata: dict) -> DataFrame:
            """
            Sell strategy Hyperopt will build and use.
            """
            conditions = []

            # GUARDS AND TRENDS
            for i in range(SELL_DNA_SIZE):

                OPR = sell_params[f'sell-oper-{i}']
                IND = sell_params[f'sell-indicator-{i}']
                INT = sell_params[f'sell-int-{i}']
                REAL = sell_params[f'sell-real-{i}']
                DFIND = dataframe[IND]
                if OPR == ">I":
                    conditions.append(DFIND > INT)
                elif OPR == "=I":
                    conditions.append(DFIND == INT)
                elif OPR == "<I":
                    conditions.append(DFIND < INT)
                elif OPR == ">R":
                    conditions.append(DFIND > REAL)
                elif OPR == "=R":
                    conditions.append(np.isclose(DFIND, REAL))
                elif OPR == "<R":
                    conditions.append(DFIND < REAL)

            if conditions:
                dataframe.loc[
                    reduce(lambda x, y: x & y, conditions),
                    'sell']=1

            return dataframe

        return populate_sell_trend
